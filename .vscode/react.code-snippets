{
    // Place your VueReact workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //     "scope": "javascript,typescript",
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }

    "React Class Component": {
        "prefix": "rcc",
        "body": [
            "//import React, {Component, PureComponent, Fragment} from 'react';",
            "//import ReactRedux, {Provider} from 'react-redux';",
            "//import {BrowserRouter,Switch,Router,Route,IndexRoute,Link,IndexLink,NavLink} from 'react-router-dom';",
            "",
            "console.log(React);",
            "const {Component, createRef} = React;",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends Component {",
            "",
            "    static defaultProps = { /*  props의 디폴트 값 설정 */ }",
            "    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ }",
            "    state = {",
            "        // 상태값(변수)을 정의한다.",
            "",
            "    }",
            "    style = {",
            "        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.",
            "        // getter 를 사용하면 객체 내부 참조가 가능하다.",
            "    ",
            "    }",
            "    func = {",
            "        // func에 정의된 메서드는 반드시 constructor에서 this를 bind() 처리해야 한다.",
            "        // func에는 자식 컴포넌트에 넘길 메서드만 작성한다.",
            "        // 왜 자식에게 부모 메서드를 넘기나? 부모의 상태값을 변경하기 위해서.",
            "    ",
            "    }",
            "    constructor(props) {",
            "        super()",
            "        // this 바인딩. 예시) this.func.handler = this.func.handler.bind(this);",
            "        // func 에 정의한 메서드는 반드시 this bind 처리해야 한다.",
            "        ",
            "        // ref 만들기. 예시) this.inputref = createRef()",
            "        ",
            "    }",
            "    componentDidMount() {",
            "        // 마운트 완료 후에 실행됨 : 페이지 load 될 때 한번",
            "        // componentDidMount가 사용되는 경우: redux 구독 설정, focus 줄때",
            "    }",
            "    componentDidUpdate(prevProps, prevState) {",
            "        // 업데이트 완료 후에 실행됨 : 여러번, state 가 변경될 때마다",
            "    }",
            "    componentWillUnmount() {",
            "        // 언마운트 완료 후에 실행됨 : 페이지 unload 될 때 한번",
            "        // componentWillUnmount가 사용되는 경우: redux 구독 해제, 이벤트 핸들러 해제",
            "    }",
            "    handler = (event)=>{",
            "        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
            "        console.log(event.target)",
            "    }",
            "    render() { // JSX로 화면 만들기",
            "        return (",
            "            <div>",
            "                ${2:}",
            "            </div>",
            "        )",
            "    }",
            "};",
            "//export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Class Component"
    },
    "React Functional Component": {
        "prefix": "rfc",
        "body": [
            "//import React, { useState, useEffect, useRef, useCallback, useMemo, Fragment } from 'react';",
            "const {useState, useEffect, useRef, useCallback, useMemo} = React;",
            //"console.log(useState); // 상태값 처리",
            //"console.log(useRef); // 렌더링과 무관한 상태값 또는 real dom 직접 접근",
            //"console.log(useEffect); // 부수 효과 처리. 부수 효과란 함수 외부의 데이터를 변경하는 연산",
            //"console.log(useCallback); // 콜백 메서드(자식에서 호출되는 부모 메서드)",
            //"",
            //"//import ReactRedux, {Provider, useDispatch, useSelector } from 'react-redux';",
            //"const {Provider, useDispatch, useSelector} = ReactRedux;",
            //"//console.log(useDispatch); // store.dispatch() 호출",
            //"//console.log(useSelector); // store.state 가져오기",
            //"",
            //"//import ReactRouterDOM, {BrowserRouter, Switch, Route, Link, NavLink, useParams, useLocation, useHistory, useRouteMatch} from 'react-router-dom';",
            //"const {BrowserRouter, Switch, Route, Link, NavLink, useParams, useLocation, useHistory, useRouteMatch} = ReactRouterDOM;",
            "",
            "${1:${TM_FILENAME_BASE}}.propsTypes = { /* props의 프로퍼티 타입 설정 */ }",
            "${1:${TM_FILENAME_BASE}}.defaultProps = { /*  props의 디폴트 값 설정 */ }",
            "function ${1:${TM_FILENAME_BASE}}(props) {",
            "    // 컴포넌트의 상태값 설정",
            "    const [변수명, set변수명] = useState(기본값); // 상태값이 기본타입인 경우",
            "    const [state, setState] = useState({ id: 0, name: '', age: 0, }); // 상태값이 참조타입 경우",
            "    ",
            "    // refIsMounted는 생명주기의 마운트와 업데이트를 구분하기 위한 ref",
            "    const refIsMounted = useRef(false);",
            "    useEffect( () => {",
            "        if (refIsMounted.current){",
            "            // 업데이트 될 때마다 실행됨. 여러번. state 가 변경될 때마다",
            "            console.log('componentDidUpdate');",
            "        }",
            "        else {",
            "            // 마운트 완료 후에 실행됨. 한번만. focus 줄때",
            "            console.log('componentDidMount');",
            "            refIsMounted.current = true;",
            "        }",
            "    });",
            "   ",
            "    // callback 메서드 작성. callback 메서드는 부모의 공유 상태값을 변경하기 위해서 사용된다.",
            "    const callback = useCallback( (param)=>{",
            "        // state 변경",
            "    });",
            "    ",
            "    // 이벤트 핸들러 작성.",
            "    const handler = (event)=>{",
            "        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
            "        console.log(event.target)",
            "    };",
            "    ",
            "    // JSX로 화면 만들기",
            "    return (",
            "        <div>",
            "            ${2:}",
            "        </div>",
            "    )",
            "}",
            "//export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Functional Component"
    },
    "Redux Code": {
        "prefix": "rdxc",
        "body": [
            "",
            "// React-Redux 작성 순서",
            "// 1. React-Redux 플러그인 추가 or import.",
            "// //import Redux from 'redux';",
            "// //import ReactRedux, {Provider} from 'react-redux';",
            "// console.log(window.Redux||'Redux import 오류');",
            "// console.log(window.ReactRedux||'ReactRedux import 오류');",
            "",
            "// 2. action상수/함수 만들기. action상수에는 접두사를 붙인다.",
            "// const ACTION상수 = { TASK_READ: 'task/READ', };",
            "// const ACTION함수 = { taskRead(task){ return { type: ACTION상수.TASK_READ, payload: task } }, };",
            "",
            "// 3. middleware 만들기. ",
            "//    middleware 는 reducer 가 실행되기 전과 후에 실행되는 3중첩 함수다. 자바 스프링 AOP와 비슷",
            "//    middleware 는 mi.s.n.a.na 3중첩 함수다. mi: middleware, s:store, n: next, a: action, na: next(action)",
            "//    외부 API 호출은 middleware 에서 한다. saga 와 axios 를 사용",
            "//    const myMiddleware = store => next => action => next(action);",
            "",
            "// 4. reducer",
            "//    리듀서별로 상태값을 분리 할 수 있다.",
            "//    state에서 객체를 참조할 때는 객체의 레퍼런스가 아니라 고유한 값(id)으로 참조해야 한다.",
            "// 4-1. state 만들기.",
            "//    const state이름 = {'이름':[]};",
            "// 4-2. reducer 만들기.",
            "//    reducer 에서 state(불변 객체) 를 조작할 때는 immer 라이브러리를 사용하면 편리하다",
            "//    reducer 에서는 immer.produce( state, (draft)=>{...} )를 사용하여 state(불변 객체)를 처리한다",
            "//    const reducer목록 = ( function(name) { return createReducer( {[name]:[]} , { ... } ) } )('목록');",
            "//    const reducer이름 = function(state=state이름, action) { return immer.produce( state, (draft)=>{ const {type,payload} = action; switch(type){...}; }); };",
            "// 4-3. reducer 합치기. Redux.combineReducers() 사용하여 여러개의 리듀서를 하나로 합치기.",
            "//    reducer 별로 state 를 나누어 생성한다. ==> store의 state 형태 = { 이름s: {...},  목록: {...}, ... }",
            "//    const reducer = Redux.combineReducers({ ['이름s']: reducer이름, ['목록s']: reducer목록 });",
            "",
            "// 5. store 만들기. 리덕스 개발자 도구 적용. ",
            "//    store 는 state 가 저장되는 single source 객체. store는 한 개만 만든다.",
            "//    한 개의 store 안에 reducer 별로 state 가 만들어진다. ==> store의 state 형태 = { 이름s: {이름:...},  목록s: {...}, ... }",
            "//    const enhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;",
            "//    const store = Redux.createStore(reducer, /*preloadedState,*/ enhancers( /* Redux.applyMiddleware(myMiddleware) */ ) );",
            "",
            "// 6. 컴포넌트",
            "// 6-1. 컴포넌트 만들기",
            "// 6-2. mapStateToProps 만들기. props를 통해 store의 state 내림 설정. {...this.state}",
            "//    const mapStateToProps = (state) => { return { '이름s': state.이름s.이름S, } }; ",
            "// 6-3. mapCallbackToProps 만들기. props를 통해 callback method 내림 설정. {...this.func}",
            "//    const mapCallbackToProps = { ...ACTION함수 };",
            "// 6-4. 컴포넌트와 store connect 하기. ",
            "//    컴포넌트명 = ReactRedux.connect(mapStateToProps, mapCallbackToProps)(컴포넌트명);",
            "",
            "// 7. 컴포넌트에 store 주입하기. ",
            "//    ReactRedux.Provider 는 store의 state가 변경되면 자동으로 render() 메서드를 실행되게 하는 컴포넌트다.",
            "//    ReactDOM.render(<ReactRedux.Provider store={store}> <컴포넌트명 /> </ReactRedux.Provider>, document.getElementById(''))",
            "",
        ],
        "description": "Redux React Code script"
    },
    "React script import": {
        "prefix": "reactplugin",
        "body": [
            "",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js\">",
            "    /* 자바스크립트로 컴파일러. ES6-->ES5, JSX-->ES5 */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.12.0/umd/react.development.js\">",
            "    /* import React, { Component, PureComponent } from 'react' */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.11.0/umd/react-dom.development.js\">",
            "    /* import ReactDOM from 'react-dom' */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/7.2.2/react-redux.js\">",
            "    /*  import ReactRedux, {Provider, useDispatch, useSelector} from 'react-redux' */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/5.2.0/react-router-dom.js\">",
            "    /*  import ReactRouterDOM, {BroswerRouter,Switch,Router,Route,IndexRoute,Link,IndexLink,NavLink} from 'react-router-dom' */",
            "</script>",
            "<script src=\"https://unpkg.com/immer\">",
            "    /* 불변객체 state를 조작하는 라이브러리. import immer from 'immer' */",
            "</script>",
            "<script type=\"text/babel\">",
            "    ",
            "</script>"
        ],
        "description": "React script"
    },
    "Axios": {
        "prefix": "axios",
        "body": [
            "// import axios from 'axios';",
            "",
            "axios({",
            "    url: 'item',  // 호출되는 서버 주소.",
            "    method: 'get',       // request method: get, post, delete, put",
            "    params: { },  // 서버로 보내는 데이터. { data1:'test1', data2:'test2' } ",
            "    timeout: 30000,    // 최대 대기 시간: 30초. 30초 이상이 되면 fail 부분이 실행됨.",
            "    responseType: 'json',  // response로 넘어오는 데이터 형태: text, html, xml, json, jsonp, script",
            "})",
            ".then( (res) => {",
            "    console.log(res.data);",
            "    this.message1 = res.data;",
            "})",
            ".catch((error) => {",
            "    console.log(error);",
            "});"
        ],
        "description": "React script"
    }

}